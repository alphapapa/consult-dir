#+title: consult-dir: switch directories easily in Emacs

#+attr_html: :width 800px :align center
[[file:media/consult-dir.png]]

Consult-dir implements commands to easily switch between "active" directories.

You can switch - with completion and filtering depending on your completion setup - to any directory you've visited recently, or to a project or bookmarked directory. You can do this at any time, including when using the minibuffer. The minibuffer prompt is then replaced with the directory you choose.

The directory candidates are collected from user bookmarks, Projectile project roots (if available), project.el project roots (if available) and recentf file locations. The =default-directory= variable is not changed in the process.

=consult-dir= is composable with all Emacs commands that require you to specify directories, and with [[https://github.com/oantolin/embark][Embark actions]] on directories. See the demos section below for examples.

* Usage
Call =consult-dir= from the minibuffer to choose a directory with completion and insert it into the minibuffer prompt, shadowing or deleting any existing directory. The file name input is retained. This lets the user switch to distant directories very quickly when finding files, for instance.

Call =consult-dir= from a regular buffer to choose a directory with completion and then interactively find a file in that directory. The command run with this directory is configurable via =consult-dir-default-command= and defaults to =find-file=.

Call =consult-dir-jump-file= from the minibuffer to asynchronously find a file anywhere under the directory that is currently in the prompt. This can be used with =consult-dir= to quickly switch directories and find files at an arbitrary depth under them. =consult-dir-jump-file= uses =consult-find= under the hood.

* Setup
To use this package, just bind =consult-dir=:
#+begin_src emacs-lisp
(define-key global-map (kbd "C-x C-d") #'consult-dir)
#+end_src

If you want to use the file-jump functionality, you can bind =consult-dir-jump-file= in the =minibuffer-local-completion-map=.
#+BEGIN_SRC emacs-lisp
(define-key minibuffer-local-completion-map (kbd "C-x C-j") #'consult-dir-jump-file)
#+END_SRC
Replace =minibuffer-local-completion-map= with
- =vertico-map= if you use Vertico,
- =selectrum-minibuffer-map= if you use Selectrum.

* Demos
Here I show the different directory sources using Consult's narrowing feature, then use =consult-dir= to easily jump around the filesystem and open files. I also use =consult-dir-jump-file= to quickly drill down a directory when I don't find the file I'm looking for at the top level:

https://user-images.githubusercontent.com/8607532/127817864-57ca9ec5-af67-4ee8-9410-4758c8450c4b.mp4
# https://user-images.githubusercontent.com/8607532/127790046-309df054-3e89-4e3c-adcf-16ec5028ad80.mp4

In this demo I call =consult-grep= with a prefix argument. This requires me to specify a directory to grep inside of, so I use =consult-dir= to specify that directory:

https://user-images.githubusercontent.com/8607532/127790057-1fa9f81b-2c3f-412d-be36-925773451c71.mp4

Here I use =consult-dir= to jump to one of my project directories when attaching a file to an email:

https://user-images.githubusercontent.com/8607532/127790065-39ddc117-5e1a-4580-a009-bc0cebd71ad8.mp4

In this example I combine =consult-dir= with Embark. I use =consult-dir= to specify a directory, then Embark to spawn an eshell there. I then use =consult-dir= again when tab-completing inside eshell to specify a distant directory to copy files from. Finally I then use =consult-dir= with Embark to jump to a bookmark in a window-split:

https://user-images.githubusercontent.com/8607532/127790071-4f98d212-c127-48e1-84cd-01701cd63d64.mp4

(In these demos I am using Vertico as my completion system.)
* Configuration
=consult-dir= should work out of the box with no configuration needed beyond binding it to a key.

However, if you use Projectile or want finer control over the directories that are offered as candidates to jump to, read on.

** Directory sources configuration:
- To make recent directories available, turn on =recentf-mode=.
- To make Projectile projects available, customize =consult-dir-project-list-function= or run
  #+BEGIN_SRC emacs-lisp
    (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)
  #+END_SRC
  Note that Projectile is /not/ required to install this package.
- Project.el projects are available by default, but you can customize =consult-dir-project-list-function=. Setting it to =nil= removes projects from the sources.

To change directory sources or their ordering, customize =consult-dir-sources=.

** Default =consult-dir= action
When called from a regular buffer (/i.e/ not the minibuffer), =consult-dir= defaults to calling =find-file= after you choose a directory. You can set this to any command you would like by customizing =consult-dir-default-command=.

** File name shadowing
By default, choosing a directory using =consult-dir= when in the minibuffer results in the text already in the prompt being "shadowed" or made inactive, but you can still delete the new text to recover it. You can make the new text replace the old instead by setting =consult-dir-shadow-filenames= to =nil=.

* Alternatives
=consult-dir= is akin to shell tools like [[https://github.com/wting/autojump][autojump]] or [[https://github.com/clvv/fasd][fasd]] but for all file/directory contexts in Emacs.

=consult-buffer= (part of Consult) already allows you to switch to bookmarks and recentf files, so this might be sufficient for you if you need to visit a proximal set of files quickly. =consult-dir= is different in that it is composable with all Emacs commands that require you to specify a directory and thus works in more contexts.

Projectile and the built-in project.el have extensive support for listing and quickly switching projects and running actions on them. =consult-dir= is more of a one-stop shop ("just get me there") for switching directories as it includes recent directories and bookmarks in the mix, allows jumping to files with =consult-dir-jump-file=, and supports running arbitrarty actions on directories using Embark. Of course, it also allows for fast directory switching when using any Emacs command that requires specifying a directory.
